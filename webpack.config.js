/*eslint-disable*/
const path = require('path');
const webpack = require('webpack');
const merge = require('webpack-merge');
const ExtractTextPlugin = require("extract-text-webpack-plugin");
const InlineChunkWebpackPlugin = require('html-webpack-inline-chunk-plugin');
// ÂºïÂÖ• Html Â§ÑÁêÜ
const HtmlWebpackPlugin = require('html-webpack-plugin');
// ÂºïÂÖ• CSS Â§ÑÁêÜ
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');
// ÂºïÂÖ• JS Â§ÑÁêÜ
const UglifyJSPlugin = require('uglifyjs-webpack-plugin');
var autoprefixer = require('autoprefixer');
var precss = require('precss');
// ÂºïÂÖ•ËøõÂ∫¶Êü•Áúã
var ProgressBarPlugin = require('progress-bar-webpack-plugin');
var chalk = require('chalk');
// Ëé∑ÂèñÊú¨Âú∞ ip Âú∞ÂùÄ
var localAddress = require('ip').address();
// ÂéªÈô§Ë≠¶ÂëäÊèêÁ§∫
process.noDeprecation = true;

console.log(`‚ñ∂Ô∏è  ÂΩìÂâçÁéØÂ¢ÉÔºö${process.env.NODE_ENV}, ÂºÄÂßãÊûÑÂª∫... üöÄ  `);

// Ê†πÊçÆÂΩìÂâç src Ëé∑ÂæóÈ°πÁõÆË∑ØÂæÑ
let rootDir = __dirname.substr(0, __dirname.indexOf('src'));
let buildPath = __dirname + '/example';

// ËÆæÁΩÆ DEBUG ÁéØÂ¢ÉÂèòÈáè,Áî®‰∫éÁéØÂ¢ÉÂà§Êñ≠
const DEBUG = process.env.NODE_ENV === 'development';

// =================================    Âü∫Á°ÄÈÖçÁΩÆ    =================================   


// babel ÈÖçÁΩÆÈ°π
const babelOptions = {
    "presets": [
        ["es2015", {
            "modules": false
        }],
        "react"
    ],
};

const commonConfig = merge([{
    entry: {
        index: [process.env.NODE_ENV == 'release' ?'./lib/index' : './src/index.js' ],
    },
    module: {
        rules: [{
                // ÂØπ js/jsx Êñá‰ª∂ÁöÑÂ§ÑÁêÜ
                test: /\.(js|jsx)$/,
                use: {
                    loader: 'babel-loader',
                    options: babelOptions,
                }
            }, {
                // ÂØπ scss/css Êñá‰ª∂ÁöÑÂ§ÑÁêÜ
                test: /\.scss$|\.css$/,
                loader: [
                    'style-loader', 'css-loader?modules&localIdentName=[name]__[local]-[hash:base64:5]', 'sass-loader', 'postcss-loader'
                ],
            }, {
                test: /\.html$/,
                use: ['raw-loader'],
                exclude: /node_modules/
            }, {
                // Â§ÑÁêÜÂõæÁâá
                test: /\.(png|jpg|jpeg|gif|svg)$/,
                exclude: /node_modules/,
                loaders: [{
                    loader: 'url-loader',
                    query: {
                        limit: 10000,
                        name: 'img/[name].[ext]?[hash:8]',
                    }
                }, {
                    loader: 'image-webpack-loader',
                    query: {
                        mozjpeg: {
                            progressive: true
                        },
                        bypassOnDebug: DEBUG,
                        pngquant: {
                            quality: '75-90'
                        }
                    }
                }]
            },
            // Â§ÑÁêÜÂ≠ó‰ΩìÊñá‰ª∂
            {
                test: /\.(ttf|woff|woff2)(\?.+)?$/,
                use: [{
                    loader: 'url-loader',
                    options: {
                        limit: 10000,
                        name: 'font/[name].[ext]?[hash:8]',
                    }
                }]
            }
        ]
    },
    plugins: [
        new webpack.LoaderOptionsPlugin({
            options: {
                postcss: [
                    precss(),
                    autoprefixer({
                        browsers: [
                            'Android >= 4', 'iOS >= 7.1'
                        ],
                    }),
                ]
            }
        }),
        new webpack.DefinePlugin({
            'process.env': {
                'NODE_ENV': JSON.stringify(process.env.NODE_ENV)
            }
        }),
        new webpack.LoaderOptionsPlugin({
            debug: DEBUG
        }),
    ],
    resolve: {
        extensions: [
            '.js', '.jsx'
        ], //ÂêéÁºÄÂêçËá™Âä®Ë°•ÂÖ®
        modules: ["libs", path.join(rootDir, "node_modules"), "node_modules"],
    },
}]);



// =================================    ÂèëÂ∏ÉÈÖçÁΩÆ    =================================   


const productionConfig = merge([{
    watch: false,
    cache: false,
    output: {
        path: buildPath,
        filename: "js/[name].bundle.js?[chunkhash:8]",
        publicPath: ''
    },
    stats: {
        assets: true,
        children: false,
        chunks: false,
        hash: true,
        modules: false,
        publicPath: false,
        timings: false,
        version: false,
        warnings: true,
        colors: {
            green: '\u001b[32m'
        }
    },
    plugins: [
        new UglifyJSPlugin({
            // ÊúÄÁ¥ßÂáëÁöÑËæìÂá∫
            beautify: false,
            // Âà†Èô§ÊâÄÊúâÁöÑÊ≥®Èáä
            comments: false,
            compress: {
                // Âú®UglifyJsÂà†Èô§Ê≤°ÊúâÁî®Âà∞ÁöÑ‰ª£Á†ÅÊó∂‰∏çËæìÂá∫Ë≠¶Âëä
                warnings: false,
                // Âà†Èô§ÊâÄÊúâÁöÑ `console` ËØ≠Âè•
                // ËøòÂèØ‰ª•ÂÖºÂÆπieÊµèËßàÂô®
                drop_console: true,
                // ÂÜÖÂµåÂÆö‰πâ‰∫Ü‰ΩÜÊòØÂè™Áî®Âà∞‰∏ÄÊ¨°ÁöÑÂèòÈáè
                collapse_vars: true,
                // ÊèêÂèñÂá∫Âá∫Áé∞Â§öÊ¨°‰ΩÜÊòØÊ≤°ÊúâÂÆö‰πâÊàêÂèòÈáèÂéªÂºïÁî®ÁöÑÈùôÊÄÅÂÄº
                reduce_vars: true
            }
        }),
        new ProgressBarPlugin({
            format: '  build [:bar] ' + chalk.green.bold(':percent') + ' (:elapsed seconds)',
            clear: false,
            callback: function () {
                setTimeout(() => {
                    process.exit();
                }, 0);
            },
        }),
        // Â§ÑÁêÜ html Êñá‰ª∂
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: './index.html',
            inject: true,
            hash: false, // ÊòØÂê¶Â¢ûÂä†ËµÑÊ∫êÊñá‰ª∂ÊåáÁ∫π hash
            minify: {
                collapseWhitespace: true, // ÂéªÈô§Â§ö‰ΩôÁ©∫Ê†º
                preserveLineBreaks: true,
                html5: true,
                minifyJS: true, // ÊòØÂê¶ÂéãÁº© js
            },
        }),
        new webpack.optimize.CommonsChunkPlugin({
            name: ["vendor", "manifest"],
            minChunks: Infinity,
        }),
        new ExtractTextPlugin('css/styles.css?[contenthash:8]'),
        new InlineChunkWebpackPlugin({
            inlineChunks: ['manifest']
        }),
        new webpack.HashedModuleIdsPlugin(),
        new OptimizeCssAssetsPlugin({
            assetNameRegExp: /\.css$/g,
            cssProcessor: require('cssnano'),
            cssProcessorOptions: {
                discardComments: {
                    removeAll: true
                }
            },
            canPrint: true
        })
    ]
}]);


// =================================    ÂºÄÂèëÈÖçÁΩÆ    =================================   


const developmentConfig = merge([{
    watch: true,
    cache: true,
    output: {
        path: buildPath,
        filename: 'js/[name].bundle.js',
        publicPath: ''
    },
    devtool: 'cheap-module-eval-source-map',
    devServer: {
        contentBase: buildPath,
        clientLogLevel: 'none',
        hot: true,
        compress: true,
        host: localAddress, // Êú¨Âú∞Ë∞ÉËØïÂú∞ÂùÄ
        overlay: true, // ËæìÂá∫ÁºñËØëÊä•ÈîôÂú® window ‰∏ä
        disableHostCheck: true,
        stats: {
            assets: true,
            colors: true,
            version: true,
            hash: true,
            timings: true,
            chunks: false,
            chunkModules: false,
            modules: false,
        },
    },
    plugins: [
        new webpack.NamedModulesPlugin(),
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: './index.html',
        }),
        new webpack.HotModuleReplacementPlugin(),
    ]
}]);


const releaseConfig = merge([{ 
    watch: false,
    cache: false,
    output: {
        path: __dirname + '/dist',
        filename: "main.js",
        publicPath: '',
        libraryTarget: "umd",
        library: 'react-city-select',
    },
    externals: {
        react: 'react',
    },
    stats: {
        assets: true,
        children: false,
        chunks: false,
        hash: true,
        modules: false,
        publicPath: false,
        timings: false,
        version: false,
        warnings: true,
        colors: {
            green: '\u001b[32m'
        }
    },
    plugins: [

        new ProgressBarPlugin({
            format: '  build [:bar] ' + chalk.green.bold(':percent') + ' (:elapsed seconds)',
            clear: false,
            callback: function () {
                setTimeout(() => {
                    process.exit();
                }, 0);
            },
        }),
        new ExtractTextPlugin('styles.css'),
        new webpack.HashedModuleIdsPlugin(),
        new OptimizeCssAssetsPlugin({
            assetNameRegExp: /\.css$/g,
            cssProcessor: require('cssnano'),
            cssProcessorOptions: {
                discardComments: {
                    removeAll: true
                }
            },
            canPrint: true
        })
    ]
}]);


// =================================    ÂêàÂπ∂ÈÖçÁΩÆËæìÂá∫    =================================

if (process.env.NODE_ENV == 'release') {
    module.exports = merge(commonConfig, releaseConfig);
} else {
    if (DEBUG) {
        module.exports = merge(commonConfig, developmentConfig);
    } else {
        module.exports = merge(commonConfig, productionConfig);
    }
}